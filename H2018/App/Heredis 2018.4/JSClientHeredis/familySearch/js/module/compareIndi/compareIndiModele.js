function compareIndiModele(c,apiFS,apiHeredis){this.context=c,this.apiFS=apiFS,this.apiHeredis=apiHeredis}compareIndiModele.prototype.context=null,compareIndiModele.prototype.apiFS=null,compareIndiModele.prototype.apiHeredis=null,compareIndiModele.prototype.familyFs=null,compareIndiModele.prototype.rootFsid=null,compareIndiModele.prototype.idUpdateIndiFs=null,compareIndiModele.prototype.mapGender={m:"http://gedcomx.org/Male",f:"http://gedcomx.org/Female"},compareIndiModele.prototype.mapEvt={birth:"http://gedcomx.org/Birth",death:"http://gedcomx.org/Death"},compareIndiModele.prototype.mapRelationships={parent:"http://gedcomx.org/ParentChild",child:"http://gedcomx.org/ParentChild",spouse:"http://gedcomx.org/Couple"},compareIndiModele.prototype.idUpdateIndiFs=null,compareIndiModele.prototype.codeIdIndividuHeredis=null,compareIndiModele.prototype.getEventsOfIndiHeredis=function(data){var events=new Array,viewManager=this.context.controller.getViewManager();if(""===data.pc.dateNaissance&&""===data.pc.lieuNaissance);else{var naissance={order:1,typeEvenement:viewManager.stringsLocalised.HNLOC_FS_COMPARE_VIEW_EVENTS_SUB_SECTION_PERSON_TITLE,typeEvt:"indi",indexEvt:0,type:"naissance",date:{original:"-"},place:{original:"-"}};naissance.date.original=data.pc.dateNaissance,naissance.place.original=data.pc.lieuNaissance,events.push(naissance)}if(""===data.pc.dateDeces&&""===data.pc.lieuDeces);else{var deces={order:2,typeEvenement:viewManager.stringsLocalised.HNLOC_FS_COMPARE_VIEW_EVENTS_SUB_SECTION_PERSON_TITLE,typeEvt:"indi",indexEvt:0,type:"deces",date:{original:"-"},place:{original:"-"}};deces.date.original=data.pc.dateDeces,deces.place.original=data.pc.lieuDeces,events.push(deces)}return data.pc.unions.length>0&&data.pc.unions.forEach(function(elt,index){var union={order:index,typeEvenement:viewManager.stringsLocalised.HNLOC_FS_COMPARE_VIEW_EVENTS_SUB_SECTION_COUPLE_TITLE,typeEvt:"union",indexEvt:1,type:elt.typeUnion,date:{original:"-"},place:{original:"-"}};""!==elt.dateUnion&&(union.date={original:elt.dateUnion}),""!==elt.lieuUnion&&(union.place={original:elt.lieuUnion}),events.push(union)}),events},compareIndiModele.prototype.compareEvtIndi=function(factsFs,heredisEventsInfo){this.controller.getFsApiCall();var viewManager=this.controller.getViewManager(),fields={typeEvt:{field:"date",type:"String"},typeEvt:{field:"lieu",type:"String"}};remoteDataEvtOptionFs={type:"evt",mode:"GET",tokenFs:"Bearer "+fsApiClient.getAccessToken(),columns:[{field:"type",title:"Type"},{field:"date",title:"Date"},{field:"lieu",title:"Lieu"},{field:"index",groupHeaderTemplate:'<span class="section" data-container="fsIndiEvtTab" data-type="#= items[0].typeEvt #" >#=items[0].category#</span>',hidden:!0}],data:dataGridFs},remoteDataEvtOptionHeredis={type:"evt",mode:"POST",columns:[{field:"type",title:"Type"},{field:"date",title:"Date"},{field:"lieu",title:"Lieu"},{field:"index",groupHeaderTemplate:'<span class="section" data-container="localIndiEvtTab" data-type="#= items[0].typeEvt #" >#=items[0].category#</span>',hidden:!0}],data:dataGridHeredis};var dataGridFs=this.formatDataEvt(factsFs,"fs"),dataGridHeredis=this.formatDataEvt(heredisEventsInfo,"heredis");this.compareEvts(dataGridFs,dataGridHeredis),viewManager.displayEventsCompareView(remoteDataEvtOptionFs,"fsIndiEvtTab",fields),viewManager.displayEventsCompareView(remoteDataEvtOptionHeredis,"localIndiEvtTab",fields)},compareIndiModele.prototype.compareRelativesIndi=function(fsRelatives){this.controller.getFsApiCall();var viewManager=this.controller.getViewManager(),heredisApiCall=this.controller.getHeredisApiCall(),fsFamilies=new Array,heredisFamilies=new Array,fieldsParentSpouse={nom:{field:"nom",type:"String"},fsID:{field:"fsID",type:"String"},dateBirth:{field:"dateBirth",type:"String"},dateDeath:{field:"dateDeath",type:"String"}},columnsTabParentSpouse=[{field:"nom",title:"Nom"},{field:"fsID",title:"fsid"},{field:"dateBirth",title:"Date de naissance"},{field:"dateDeath",title:"Date de décès"}],fieldsChildren={nom:{field:"nom",type:"String"},dateBirth:{field:"dateBirth",type:"String"},dateDeath:{field:"dateDeath",type:"String"},pere:{field:"pere",type:"String"},mere:{field:"mere",type:"String"},fsid:{field:"fsID",type:"String"}},columnTabChildren=[{field:"nom",width:"110px",title:"Nom"},{field:"fsid",width:"110px",title:"Fsid"},{field:"dateBirth",title:"Date de naissance"},{field:"dateDeath",title:"Date de décès"},{field:"pere",title:"Père"},{field:"mere",title:"Mère"}],parentsOrderIndex={Masculin:1,"Féminin":2};fsFamilies=[{titre:"Parents",type:"parents",mode:"GET",token:"Bearer "+fsApiClient.getAccessToken(),args:{},urlResource:fsRelatives.parents.href,columnTab:columnsTabParentSpouse,fields:fieldsParentSpouse,callbackSchema:function(resp){var parents=new Array;return void 0!==resp&&resp.persons.forEach(function(elt){var infoIndi={};infoIndi.nom=elt.display.name,infoIndi.fsID=elt.id,infoIndi.dateBirth=elt.display.birthDate,infoIndi.dateDeath=elt.display.deathDate,infoIndi.index=parentsOrderIndex[elt.display.gender],parents.push(infoIndi)}),parents}},{titre:"Conjoints",type:"spouses",mode:"GET",urlResource:fsRelatives.spouses.href,token:"Bearer "+fsApiClient.getAccessToken(),args:{},columnTab:columnsTabParentSpouse,fields:fieldsParentSpouse,callbackSchema:function(resp){var spouses=new Array;return void 0!==resp&&void 0!==resp.persons&&resp.persons.forEach(function(elt){var infoIndi={};infoIndi.nom=elt.display.name,infoIndi.fsID=elt.id,infoIndi.dateBirth=elt.display.birthDate,infoIndi.dateDeath=elt.display.deathDate,infoIndi.index=1,spouses.push(infoIndi)}),spouses}},{titre:" Enfants ",type:"children",mode:"GET",urlResource:fsRelatives.children.href,token:"Bearer "+fsApiClient.getAccessToken(),args:{},columnTab:columnTabChildren,fields:fieldsChildren,callbackSchema:function(resp){var children=new Array;return void 0!==resp&&void 0!==resp.persons&&resp.persons.forEach(function(elt){var infoIndi={};infoIndi.nom=elt.display.name,infoIndi.fsID=elt.id,infoIndi.dateBirth=elt.display.birthDate,infoIndi.dateDeath=elt.display.deathDate,infoIndi.index=1,resp.childAndParentsRelationships.forEach(function(rel){rel.child.resourceId===elt.id&&(void 0!==rel.father&&(infoIndi.pere=rel.father.resourceId),void 0!==rel.mother&&(infoIndi.mere=rel.mother.resourceId))}),children.push(infoIndi)}),children}}],heredisFamilies=[{titre:"Parents",type:"parents",mode:"POST",token:heredisApiCall.ajaxController.getToken(),urlResource:heredisApiCall.ajaxController.getBaseUrl()+"/libheredis/familySearch/getFamilies",args:{uuid:heredisApiCall.ajaxController.uuid,codeIDPC:this.mInfoPC.codeID,codeIDSpouses:this.mInfoPC.codeIdsSpouses,typeRsrc:"parents"},fields:fieldsParentSpouse,columnTab:columnsTabParentSpouse,callbackSchema:function(resp){var parents=new Array;return resp.forEach(function(elt){var indiFormate={};indiFormate.nom=elt.StrNomPrenomsTous,indiFormate.dateBirth=elt.strDateNaissancefd_lun_8_fev_1954,indiFormate.dateDeath=elt.strDateDecesfd_lun_8_fev_1954,indiFormate.fsID=elt.fsID,indiFormate.index=elt.index,parents.push(indiFormate)}),parents}},{titre:"Conjoints",type:"spouses",mode:"POST",token:heredisApiCall.ajaxController.getToken(),urlResource:heredisApiCall.ajaxController.getBaseUrl()+"/libheredis/familySearch/getFamilies",args:{uuid:heredisApiCall.ajaxController.uuid,codeIDPC:this.mInfoPC.codeID,codeIDSpouses:this.mInfoPC.codeIdsSpouses,typeRsrc:"spouses"},fields:fieldsParentSpouse,columnTab:columnsTabParentSpouse,callbackSchema:function(resp){var spouses=new Array;return resp.forEach(function(elt){var indiFormate={};indiFormate.nom=elt.StrNomPrenomsTous,indiFormate.dateBirth=elt.strDateNaissancefd_lun_8_fev_1954,indiFormate.dateDeath=elt.strDateDecesfd_lun_8_fev_1954,indiFormate.fsID=elt.fsID,spouses.push(indiFormate)}),spouses}},{titre:"Enfants",type:"children",mode:"POST",token:heredisApiCall.ajaxController.getToken(),urlResource:heredisApiCall.ajaxController.getBaseUrl()+"/libheredis/familySearch/getFamilies",args:{uuid:heredisApiCall.ajaxController.uuid,codeIDPC:this.mInfoPC.codeID,codeIDSpouses:this.mInfoPC.codeIdsSpouses,typeRsrc:"children"},fields:fieldsChildren,columnTab:columnTabChildren,callbackSchema:function(resp){var children=new Array;return resp.forEach(function(elt){var indiFormate={};indiFormate.nom=elt.StrNomPrenomsTous,indiFormate.dateBirth=elt.strDateNaissancefd_lun_8_fev_1954,indiFormate.dateDeath=elt.strDateDecesfd_lun_8_fev_1954,indiFormate.pere=elt.nomPere,indiFormate.mere=elt.nomMere,indiFormate.fsID=elt.fsID,children.push(indiFormate)}),children}}],viewManager.displayRelationShipCompareView(heredisFamilies,"localIndiRelationshipTab"),viewManager.displayRelationShipCompareView(fsFamilies,"fsIndiRelationshipTab")},compareIndiModele.prototype.compareEvts=function(a,b){var fsApiCall=this.controller.getFsApiCall(),viewManager=this.controller.getViewManager(),mapIndexOrderFacts=(fsApiCall.typeFactsRelationShips,fsApiCall.indexTypeFacts),mapTypeFactsIndi=fsApiCall.typeFactsPerson,mapTypeKeysFactIndi=Object.keys(mapTypeFactsIndi),mapTypeFactsUnion=fsApiCall.typeFactsRelationShips,mapTypeKeysFactUnion=Object.keys(mapTypeFactsUnion),compare=function(mapKeys,map,typeSection){if("indi"===typeSection)var indexEvt=0,typeEvenement=viewManager.stringsLocalised.HNLOC_FS_COMPARE_VIEW_EVENTS_SUB_SECTION_PERSON_TITLE;else if("union"===typeSection)indexEvt=1,typeEvenement=viewManager.stringsLocalised.HNLOC_FS_COMPARE_VIEW_EVENTS_SUB_SECTION_COUPLE_TITLE;mapKeys.forEach(function(elt){var found=!1;if(a.forEach(function(fsevt){void 0!==fsevt.type&&fsevt.type===map[elt]&&(found=!0)}),found){var foundInOtherTable=!1;if(b.forEach(function(heredisEvt){void 0!==heredisEvt.type&&heredisEvt.type===map[elt]&&(foundInOtherTable=!0)}),foundInOtherTable);else{var typeEvt=map[elt];b.push({typeEvt:typeEvt,type:" ",date:" ",lieu:" ",category:typeEvenement,index:indexEvt,order:mapIndexOrderFacts[typeEvt]})}}else{foundInOtherTable=!1;if(b.forEach(function(heredisEvt){void 0!==heredisEvt.type&&heredisEvt.type===map[elt]&&(foundInOtherTable=!0)}),foundInOtherTable){typeEvt=map[elt];a.push({typeEvt:typeEvt,type:" ",date:" ",lieu:" ",category:typeEvenement,index:indexEvt,order:mapIndexOrderFacts[typeEvt]})}}})};compare(mapTypeKeysFactIndi,mapTypeFactsIndi,"indi"),compare(mapTypeKeysFactUnion,mapTypeFactsUnion,"union")},compareIndiModele.prototype.formatDataEvt=function(evt,typeIndividu){var mapType=this.apiFS.typeFacts,mapTypeFactsIndi=this.apiFS.typeFactsPerson,mapTypeFactsRelationships=this.apiFS.typeFactsRelationShips,mapIndexOrderFacts=fsApiCall.indexTypeFacts,dataGrid=new Array;return Object.keys(mapType).forEach(function(elt){var type;type=mapType[elt],evt.forEach(function(elt){var date="",lieu="";if(void 0!==elt.date&&void 0!==elt.date.original&&(date=elt.date.original),void 0!==elt.place&&void 0!==elt.place.original&&(lieu=elt.place.original),"fs"===typeIndividu)if(void 0!==mapTypeFactsIndi[elt.type]&&mapTypeFactsIndi[elt.type]===type){var typeEvt=mapTypeFactsIndi[elt.type],indexEvt=0,typeEvenement=viewManager.stringsLocalised.HNLOC_FS_COMPARE_VIEW_EVENTS_SUB_SECTION_PERSON_TITLE;dataGrid.push({typeEvt:typeEvt,type:typeEvt,date:date,lieu:lieu,category:typeEvenement,index:indexEvt,order:mapIndexOrderFacts[typeEvt]})}else void 0!==mapTypeFactsRelationships[elt.type]&&mapTypeFactsRelationships[elt.type]===type&&(typeEvt=mapTypeFactsIndi[elt.type],indexEvt=1,typeEvenement=viewManager.stringsLocalised.HNLOC_FS_COMPARE_VIEW_EVENTS_SUB_SECTION_COUPLE_TITLE,dataGrid.push({typeEvt:typeEvt,type:typeEvt,date:date,lieu:lieu,category:typeEvenement,index:indexEvt,order:mapIndexOrderFacts[typeEvt]}));else"heredis"===typeIndividu&&void 0!==elt.type&&elt.type===type&&dataGrid.push({typeEvt:elt.type,type:elt.type,date:date,lieu:lieu,category:elt.typeEvenement,index:elt.indexEvt,order:mapIndexOrderFacts[elt.type]})})}),dataGrid},compareIndiModele.prototype.getFamilyOfIndiFs=function(fsid,idUpdateIndiFs,callback){var self=this;self.idUpdateIndiFs=idUpdateIndiFs,self.apiFS.getJSONFamiliesOfPersonId(fsid,function(a,data){self.apiHeredis.formatJSON(encodeURIComponent(JSON.stringify(data)),function(dataResp){self.familyFs=dataResp,self.rootFsid=fsid,self.getInfofamilyHeredis(function(heredisFamilyPersons){var fsFamilyPersons=self.getInfoFamilyFs(fsid);fsFamilyPersons.found=!0,void 0!==callback&&callback(heredisFamilyPersons,fsFamilyPersons)})})},function(errorCode,pid){(404!==errorCode&&403!==errorCode&&410!==errorCode&&301!==errorCode||self.getInfofamilyHeredis(function(heredisFamilyPersons){var fsFamilyPersons={parents:{father:self.context.getIndiFSFullInfo({display:{}}),mother:self.context.getIndiFSFullInfo({display:{}})},spouses:[],children:[],root:self.context.getIndiFSFullInfo({display:{personID:fsid},id:fsid}),found:!1};void 0!==callback&&callback(heredisFamilyPersons,fsFamilyPersons)}),401===errorCode)&&self.context.controller.getViewManager().refreshToken()})},compareIndiModele.prototype.getParentsOfindiFs=function(fsid){var self=this,parents={father:{id:"",display:{}},mother:{id:"",display:{}}};return void 0!==self.familyFs.relationships&&self.familyFs.relationships.forEach(function(element){if(element.person2.resourceId===fsid&&element.type===self.mapRelationships.parent){var indi=self.getIndiFromPersons(element.person1.resourceId);indi.gender.type===self.mapGender.m?parents.father=indi:indi.gender.type===self.mapGender.f&&(parents.mother=indi)}}),parents},compareIndiModele.prototype.getChildrenOfIndiFs=function(fsid){var self=this,children=[];return void 0!==self.familyFs.childAndParentsRelationships&&self.familyFs.childAndParentsRelationships.forEach(function(element){if(void 0!==element.father&&element.father.resourceId===fsid){var indi=self.getIndiFromPersons(element.child.resourceId);void 0!==element["heredis-numeroLit"]&&(indi.display.numeroLit=element["heredis-numeroLit"]),children.push(indi)}if(void 0!==element.mother&&element.mother.resourceId===fsid){indi=self.getIndiFromPersons(element.child.resourceId);void 0!==element["heredis-numeroLit"]&&(indi.display.numeroLit=element["heredis-numeroLit"]),children.push(indi)}}),children},compareIndiModele.prototype.getIndiFromApi=function(fsid,callback){this.apiFS.getPersonById(fsid,callback)},compareIndiModele.prototype.getIndiFromPersons=function(fsid){var resp=-1;return this.familyFs.persons.forEach(function(element){element.id===fsid&&((resp=element).display["heredis-birthDeathYears"]=element["heredis-birthDeathYears"],resp.display.namePid=element.display.name+" - "+element.id,resp.display.nameTp=element.display.name.replace(new RegExp('"',"g"),"&quot;")+" - "+element.id)}),resp},compareIndiModele.prototype.getRootIndi=function(fsid){return this.getIndiFromPersons(fsid)},compareIndiModele.prototype.getSpousesOfIndiFs=function(fsid){var spouses=[],self=this;return void 0!==self.familyFs.relationships&&self.familyFs.relationships.forEach(function(element){if(element.person1.resourceId===fsid&&element.type===self.mapRelationships.spouse){var indi=self.getIndiFromPersons(element.person2.resourceId);void 0!==element["heredis-numeroLit"]&&(indi.display.numeroLit=element["heredis-numeroLit"]),void 0!==element.facts&&element.facts.length>0&&(indi.display.unionDate="",indi.display.unionDateYear="",void 0!==element.facts.date&&(void 0!==element.facts[0].date["heredis-date"]&&(indi.display.unionDate=element.facts[0].date["heredis-date"]),void 0!==element.facts[0].date["heredis-year"]&&(indi.display.unionDateYear=element.facts[0].date["heredis-year"]))),spouses.push(indi)}else if(element.person2.resourceId===fsid&&element.type===self.mapRelationships.spouse){indi=self.getIndiFromPersons(element.person1.resourceId);void 0!==element["heredis-numeroLit"]&&(indi.display.numeroLit=element["heredis-numeroLit"]),void 0!==element.facts&&(indi.display.unionDate=element.facts[0].date["heredis-date"],indi.display.unionDateYear=element.facts[0].date["heredis-year"]),spouses.push(indi)}}),spouses},compareIndiModele.prototype.getInfofamilyHeredis=function(callback){this.apiHeredis.getInfosPCFromLib(function(data){console.log(data),data.pc.tabPcFullIdentity=data.tabPcFullIdentity,data.pc.personID=data.fsid,data.pere.personID=data.pere.fsId,data.mere.personID=data.mere.fsId,data.pc.codeId=data.codeId,data.pc.namePid=data.pc.tabPcFullIdentity,""!==data.pc.personID&&(data.pc.namePid=data.pc.tabPcFullIdentity+" - "+data.pc.personID),data.pc.strBirthPlaceDate=data.pc.StrDateNaissanceParams_fd_8_fevrier_1954,""!==data.pc.lieuNaissance&&(data.pc.strBirthPlaceDate=data.pc.strBirthPlaceDate+" - "+data.pc.lieuNaissance),data.pc.strDeathPlaceDate=data.pc.StrDateDecesParams_fd_8_fevrier_1954,""!==data.pc.lieuDeces&&(data.pc.strDeathPlaceDate=data.pc.strDeathPlaceDate+" - "+data.pc.lieuDeces),data.pere.namePid=data.pere.strNomsPrenoms,""!==data.pere.personID&&(data.pere.namePid=data.pere.strNomsPrenoms+" - "+data.pere.personID),data.mere.namePid=data.mere.strNomsPrenoms,""!==data.mere.personID&&(data.mere.namePid=data.mere.strNomsPrenoms+" - "+data.mere.personID);var HeredisFamilyTreePersons={parents:{mother:data.mere,father:data.pere},root:data.pc,spouses:data.conjoints,children:data.enfants};HeredisFamilyTreePersons.spouses.forEach(function(element,index){element.mainName=element.strNomsPrenoms,element.name=element.strNomsPrenoms,element.personID=element.fsID,element.namePid=element.name,element.nameTp=element.name.replace(new RegExp('"',"g"),"&quot;"),""!==element.personID&&(element.namePid=element.name+" - "+element.personID),element.dateND=element.strNaisDecesCourtWithPrivate,element.unionDate="",element.unions.forEach(function(union){union.conjointId===HeredisFamilyTreePersons.root.codeId&&(element.unionDate=union.dateUnion)}),HeredisFamilyTreePersons.spouses[index]=element}),HeredisFamilyTreePersons.children.forEach(function(element,index){element.mainName=element.strNomsPrenoms,element.name=element.strNomsPrenoms,element.personID=element.fsID,element.namePid=element.name,element.nameTp=element.name.replace(new RegExp('"',"g"),"&quot;"),""!==element.personID&&(element.namePid=element.name+" - "+element.personID),element.dateND=element.strNaisDecesCourtWithPrivate,HeredisFamilyTreePersons.children[index]=element}),void 0!==callback&&callback(HeredisFamilyTreePersons)})},compareIndiModele.prototype.getInfoFamilyFs=function(fsid){var self=this,FsfamilytreePersons={parents:{father:null,mother:null},spouses:[],children:[],root:null},rootIndiFs=this.getRootIndi(fsid);FsfamilytreePersons.root=this.context.getIndiFSFullInfo(rootIndiFs);var parents=this.getParentsOfindiFs(fsid);return FsfamilytreePersons.parents.father=this.context.getIndiFSFullInfo(parents.father),FsfamilytreePersons.parents.mother=this.context.getIndiFSFullInfo(parents.mother),this.getChildrenOfIndiFs(fsid).forEach(function(element){FsfamilytreePersons.children.push(self.context.getIndiFSFullInfo(element))}),this.getSpousesOfIndiFs(fsid).forEach(function(element){var spouse=self.context.getIndiFSFullInfo(element);FsfamilytreePersons.spouses.push(spouse)}),FsfamilytreePersons},compareIndiModele.prototype.getResumeIndiFs=function(self,fsid,name){var viewManager=self.context.controller.getViewManager();console.log(viewManager),self.apiFS.getJSONFamiliesOfPersonId(fsid,function(a,resp){self.apiHeredis.showFSIndiSummary(JSON.stringify(resp),name,function(){})},function(errorCode,pid){401===errorCode?viewManager.refreshToken():410!==errorCode&&403!==errorCode&&301!==errorCode||viewManager.ErrorRequestHandler(errorCode,pid)})},compareIndiModele.prototype.getResumeIndiHeredis=function(self,fsid){self.apiHeredis.getResumeIndividu(fsid)},compareIndiModele.prototype.deleteToken=function(){this.apiFS.deleteAccessToken()};